#!/usr/bin/env node

var app = require("../app");
var debug = require("debug")("app:server");
var http = require("http");

var cluster = require("cluster");
var numCPUs = require("os").cpus().length;

if (cluster.isMaster) {
  console.log("[master] " + "start master...");

  for (var i = 0; i < numCPUs; i++) {
    cluster.fork();
  }

  cluster.on("listening", function(worker, address) {
    console.log(
      "[master] " +
        "listening: worker" +
        worker.id +
        ",pid:" +
        worker.process.pid +
        ", Address:" +
        address.address +
        ":" +
        address.port
    );
  });
} else if (cluster.isWorker) {
  console.log("[worker] " + "start worker ..." + cluster.worker.id);
  var server = http.createServer(app);
  server.listen(3000);
  server.on("error", onError);
  server.on("listening", onListening);
}

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
